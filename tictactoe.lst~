tictactoe                                                                                                               PAGE 1
                         1     ;-------------------------------------------------
                         2     ;TicTacToe, 2 Spieler
                         3     ; Eingabe: Matrix-Keypad an P0 (P0.0-P0.3, für 9 Felder), Eingabe bestätigen P3.2; P3.2 muss direkt w
                         4     ; Ausgabe: 8x8-LED-Matrix an P1, P2
                         5     ;
                         6     ; -------------------------------------------------
                         7
                         8
                         9     ORG 0000H   ; Startadresse des Programms
0000 8013               10     LJMP INIT_BOARD
                        11
                        12     ;-----------------------------------------------------------------------
                        13     ;ISR
                        14     ;-----------------------------------------------------------------------
                        15     ORG 0003H ; Einsprungsadresse von Interrupt 3.2
0003 802C               16     LJMP ON_INPUT
                        17
                        18     ORG 0013H ; Einsprungsadresse von Interrupt 3.3
0013 01BD               19     LJMP CLEAR_FIELD
                        20
                        21     ;-----------------------------------------------------------------------
                        22     ; Logik
                        23     ;-----------------------------------------------------------------------
                        24     INIT_BOARD:
                        25             ;Bits für Interrupt
                        26             ;SETB IT0       ; Externer Interrupt reagiert auf fallende Flanke an P3.2; -> ist für richtig
0016 C288               27             CLR IT0         ; Externer Interrupt reagiert auf gedrückten Schalter P3.2
0018 D2A8               28             SETB EX0        ; Externen Interrupt aktivieren
001A C28A               29             CLR IT1         ; Externer Interrupt reagiert auf gedrückten Schalter P3.3
001C D2AA               30             SETB EX1        ; Externen Interrupt aktivieren
001E D2AF               31             SETB EA         ; Interrupts generell zulassen
                        32              ; --- ab hier reagiert der µC auf den externen Interrupt 0 und springt auf Adresse 03H (ISR)
0020 7F00               33             mov r7, #00000000b      ;00 | 00 | 01
                        34                                     ;00 | 00 | 01           wenn x < 3 -> R7
                        35                                     ;-- - -- - --
0022 7E00               36             mov r6, #00000000b      ;11 | 01 | 00
                        37                                     ;11 | 01 | 00           wenn x < 6 -> R6
                        38                                     ;-- | -- | --
0024 7D00               39             mov r5, #00000000b      ;11 | 00 | 00
                        40                                     ;11 | 00 | 00           sonst R5
                        41
0026 759000             42             MOV P1, #00H    ; Reset Register Port 1 als Ausgangsport für LED-Matrix; Befehl nicht notwend
0029 75A000             43             MOV P2, #00H    ; Reset Register Port 2 als Ausgangsport für LED-Matrix; Befehl nicht notwend
                        44
002C 8000               45             LJMP MAIN_LOOP
                        46
                        47
                        48     MAIN_LOOP:
                        49             ;-----------------------------------------------------------------------
                        50                 ; ON_INPUT: Wird P3.2 betätigt, so wird Port P0 (P0.0-P0.3) eingelesen -> liefert Dezimal
                        51             ;-----------------------------------------------------------------------
002F 3158               52             LCALL DISPLAY_BOARD
0032 80FC               53             JMP MAIN_LOOP
                        54
                        55
                        56     ON_INPUT:
0034 E580               57             MOV a, P0
0036 540F               58             ANL a, #00FH ; bitweise &-Verknüpfung, um nur die letzten 4 Bits (P0.0-P0.3) auszuwerten
0038 F8                 59             MOV R0, a
                        60             ;-----------------------------------------------------------------------
                        61                 ; Mappe Feld auf 8x8 Matrix
                        62                 ; => R0 enthält den Wert des zu setztenden Feldes
                        63             ;-----------------------------------------------------------------------
                        64             ; x < 3
0039 9403               65             SUBB A, #03h; Idee: Angenommen: Eingabe 8  soll auf Feld 8 (mitte unten) gemappt werden -> sc
                        66                             ;bestimme die Mitte durch Bitshifts
                        67                             ;
                        68                             ; 8-3 >0; 5-3>0; 2-3 = -1 (^=n) Setze Carry oder wenn akku leer, springe auf
003B 400E               69             JC LESS_THAN_3 ; x<3 -> schreibe in R7
003D 600C               70             JZ LESS_THAN_3
                        71
                        72             ; 3 < x < 6
003F 9403               73             SUBB A, #03h
0041 4027               74             JC LESS_THAN_6 ; x<6 -> schreibe in R6
0043 6025               75             JZ LESS_THAN_6
                        76
                        77             ; 6< x < 9
0045 9403               78             SUBB A, #03h
0047 4040               79             JC LESS_THAN_9 ; x<9 -> schreibe in R5
0049 603E               80             JZ LESS_THAN_9
                        81
                        82             ; x < 3
                        83             LESS_THAN_3:
004B FA                 84                     MOV R2, A; register für zähler der foor loop
                        85                     ; wenn Bit P3.7 gesetzt ist, so schreibe #00000001b (Spieler 2), ansonsten #00000011b
004C 20B75D             86                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD
004F 30B756             87                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD
                        88                     NACH_REGISTER_FÜLLEN1:
0052 B2B7               89                             CPL P3.7
0054 CA                 90                             xch A,R2                ; dopppelte Vertauschung notwendig!!
0055 C2D6               91                             CLR AC
0057 10D706             92                             JBC CY,SUM_LOOP_3
                        93
                        94                     JoaNhBinZuUnkreativ1:
005A CA                 95                             xch A,R2                ;tausche A mit R2
005B 6F                 96                             XRL A, R7               ;schreibe wert in TicTacToeFeld mit exclusiv-oder-Ver
005C FF                 97                             MOV R7, A               ;speichere Wert in Register zwischen
005D 11CE               98                             LCALL CHECK_FOR_WIN
0060 32                 99                             RETI                    ;return from interupt; remove interrupt-bit
                       100
                       101             SUM_LOOP_3:
0061 CA                102                     xch A,R2
0062 0A                103                     INC R2                          ;Inkrementiere den Zählerwert für die nächste Iterati
0063 23                104                     RL A                            ;rotiere akku um 3 Stellen je übertrag
0064 23                105                     RL A
0065 23                106                     RL A
0066 CA                107                     xch A,R2                        ;tausche A(kku) mit R2
0067 70F8              108                     JNZ SUM_LOOP_3                  ;springe zurück zur Schleife, wenn r2 != 0
0069 60F0              109                     JZ JoaNhBinZuUnkreativ1         ;sonst speichere Wert in R7
                       110
                       111             ;-----------------------------------------------------------------------
                       112             ; 3 < x < 6
                       113             LESS_THAN_6:
006B FA                114                     MOV R2, A
006C 20B746            115                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD2
006F 30B73F            116                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD2
                       117                     NACH_REGISTER_FÜLLEN2:
0072 B2B7              118                             CPL P3.7
0074 CA                119                             xch A,R2
0075 C2D6              120                             CLR AC
0077 10D706            121                             JBC CY,SUM_LOOP_6
                       122
                       123                     JoaNhBinZuUnkreativ2:
007A CA                124                             xch A,R2
007B 6E                125                             XRL A, R6
007C FE                126                             MOV R6, A
007D 11CE              127                             LCALL CHECK_FOR_WIN
0080 32                128                             RETI
                       129
                       130             SUM_LOOP_6:
0081 CA                131                     xch A,R2
0082 0A                132                     INC R2
0083 23                133                     RL A
0084 23                134                     RL A
0085 23                135                     RL A
0086 CA                136                     xch A,R2
0087 70F8              137                     JNZ SUM_LOOP_6
0089 60F0              138                     JZ JoaNhBinZuUnkreativ2
                       139
                       140
                       141
                       142             ;-----------------------------------------------------------------------
                       143             ; 6< x < 9
                       144             LESS_THAN_9:
008B FA                145                     MOV R2, A
008C 20B72F            146                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD3
008F 30B728            147                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD3
                       148                     NACH_REGISTER_FÜLLEN3:
0092 B2B7              149                             CPL P3.7
0094 CA                150                             xch A,R2
0095 C2D6              151                             CLR AC
0097 10D706            152                             JBC CY,SUM_LOOP_9
                       153
                       154                     JoaNhBinZuUnkreativ3:
009A CA                155                             xch A,R2
009B 6D                156                             XRL A, R5
009C FD                157                             MOV R5, A
009D 11CE              158                             LCALL CHECK_FOR_WIN
00A0 32                159                             RETI
                       160
                       161             SUM_LOOP_9:
00A1 CA                162                     xch A,R2
00A2 0A                163                     INC R2
00A3 23                164                     RL A
00A4 23                165                     RL A
00A5 23                166                     RL A
00A6 CA                167                     xch A,R2
00A7 70F8              168                     JNZ SUM_LOOP_9
00A9 60F0              169                     JZ JoaNhBinZuUnkreativ3
                       170
                       171     ; Das hier ist bisschen unschön, aber es muss zu der jeweiligen Adresse im 'IF' zurückgesprungen werd
                       172     WRITE_PLAYER_1_INTO_FIELD:
00AB 7403              173             MOV A, #00000011b
00AD 80A6              174             JMP NACH_REGISTER_FÜLLEN1
                       175     WRITE_PLAYER_2_INTO_FIELD:
00AF 7401              176             MOV A, #00000001b
00B1 80A2              177             JMP NACH_REGISTER_FÜLLEN1
                       178
                       179     WRITE_PLAYER_1_INTO_FIELD2:
00B3 7403              180             MOV A, #00000011b
00B5 80BD              181             JMP NACH_REGISTER_FÜLLEN2
                       182     WRITE_PLAYER_2_INTO_FIELD2:
00B7 7401              183             MOV A, #00000001b
00B9 80B9              184             JMP NACH_REGISTER_FÜLLEN2
                       185
                       186     WRITE_PLAYER_1_INTO_FIELD3:
00BB 7403              187             MOV A, #00000011b
00BD 80D4              188             JMP NACH_REGISTER_FÜLLEN3
                       189     WRITE_PLAYER_2_INTO_FIELD3:
00BF 7401              190             MOV A, #00000001b
00C1 80D0              191             JMP NACH_REGISTER_FÜLLEN3
                       192
                       193
                       194     CLEAR_FIELD:
00C3 7F00              195             MOV R7, #00H
00C5 7E00              196             MOV R6, #00H
00C7 7D00              197             MOV R5, #00H
00C9 7C00              198             MOV R4, #00H
00CB 7B00              199             MOV R3, #00H
00CD 7A00              200             MOV R2, #00H
00CF 7900              201             MOV R1, #00H
00D1 7800              202             MOV R0, #00H
00D3 32                203             RETI
                       204
                       205
                       206     CHECK_FOR_WIN:
00D4 8000              207             LJMP CHECK_HORIZONTAL
                       208             CHECK_HORIZONTAL:
                       209             ;Waagerechte
                       210             ;a: Für Spieler 2 (Ganzes Feld) für jedes Register (5-7), |-Verknüpfung mit 00100100, addiere
                       211             ;b: Für Spieler 1 vorher noch #10101010b mit or-verknüpfung, dann a: mit anderen zählerstand
                       212                     ;Spieler mit ganzen Feldern
                       213                     ;MOV R7, #01001001b     ;zum Testen
00D7 EF                214                     MOV A, R7
00D8 4424              215                     ORL A, #00100100b
00DA 04                216                     INC A
00DB 6020              217                     JZ INC_COUNTER_1
                       218
00DD EE                219                     MOV A, R6
00DE 4424              220                     ORL A, #00100100b
00E0 04                221                     INC A
00E1 601A              222                     JZ INC_COUNTER_1
                       223
00E3 ED                224                     MOV A, R5
00E4 4424              225                     ORL A, #00100100b
00E6 04                226                     INC A
00E7 6014              227                     JZ INC_COUNTER_1
                       228
                       229                     ;Spieler mit halben Feldern
00E9 EF                230                     MOV A, R7                       ; exclusiv oder, da das vollständig gefüllte Feld die
00EA 44B6              231                     ORL A, #10110110b
00EC 04                232                     INC A
00ED 6010              233                     JZ INC_COUNTER_2
                       234
00EF EE                235                     MOV A, R6
00F0 44B6              236                     ORL A, #10110110b
00F2 04                237                     INC A
00F3 600A              238                     JZ INC_COUNTER_2
                       239
00F5 ED                240                     MOV A, R5
00F6 44B6              241                     ORL A, #10110110b
00F8 04                242                     INC A
00F9 6004              243                     JZ INC_COUNTER_2
                       244
00FB 800E              245                     LJMP CHECK_VERTICAL
                       246
                       247             ;-----------------------------------------------------------------------
                       248             ; JA DIE METHODENDEKLARATION IST HIER SUPER VERWIRREND.
                       249             ; habe das hier hingepasted, da sonst die Adressen nicht gefunden werden, weil anscheinend di
                       250             ; Wenn die Deklaration und der tatsächliche Aufruf zu weit auseinander stehen, dann findet er
                       251             ;-----------------------------------------------------------------------
                       252             INC_COUNTER_1:          ; R4 beinhaltet Punktestand von S1 und S2: 0000 | 0000
00FE 0C                253                     INC R4
00FF 22                254                     RET ;JMP MAIN_LOOP
                       255             INC_COUNTER_2:
0100 CC                256                     XCH A, R4
0101 23                257                     RL A
0102 23                258                     RL A
0103 23                259                     RL A
0104 23                260                     RL A
0105 04                261                     INC A
0106 23                262                     RL A
0107 23                263                     RL A
0108 23                264                     RL A
0109 23                265                     RL A
010A CC                266                     XCH A, R4
010B 22                267                     RET
                       268                     ;JMP MAIN_LOOP
                       269
                       270             CHECK_VERTICAL:
                       271             ;Senkrechte
                       272             ;a: für Register R7, R6, R5 jeweils &-Verknüpfung #11X00000b;
                       273             ;b: rotiere alu 2x
                       274             ;c: fülle auf und addiere -> Carry -> Zählerstand
                       275             ;linke reihe
010C EF                276                     MOV A, R7
010D 54C0              277                     ANL A, #11000000b       ; nur linke Reihe
010F 23                278                     RL A                    ; rotiere Alu 2x
0110 23                279                     RL A
                       280
0111 4E                281                     ORL A, R6
0112 54C0              282                     ANL A, #11000000b       ; nur linke Reihe
0114 23                283                     RL A
0115 23                284                     RL A
                       285
0116 4D                286                     ORL A, R5
0117 54C0              287                     ANL A, #11000000b       ; nur linke Reihe
0119 F5F0              288                     MOV B, A                ; speichere Wert zwischen
                       289
011B 6430              290                     XRL A, #00110000b       ; fülle
011D 04                291                     INC A                   ; Zählerstand
011E 60DE              292                     JZ INC_COUNTER_1
                       293
0120 C5F0              294                     XCH A,B
0122 64BA              295                     XRL A, #10111010b       ; fülle                         HOFFENTLICH STIMMT DIE BITMAP
0124 04                296                     INC A                   ; Zählerstand
0125 60D9              297                     JZ INC_COUNTER_2
                       298
                       299             ; mittlere reihe
0127 EF                300                     MOV A, R7
0128 5418              301                     ANL A, #00011000b       ; nur linke Reihe
012A 23                302                     RL A                    ; rotiere Alu 2x
012B 23                303                     RL A
                       304
012C 4E                305                     ORL A, R6
012D 5418              306                     ANL A, #00011000b       ; nur linke Reihe
012F 23                307                     RL A
0130 23                308                     RL A
                       309
0131 4D                310                     ORL A, R5
0132 5418              311                     ANL A, #00011000b       ; nur linke Reihe
0134 F5F0              312                     MOV B, A                ; speichere Wert zwischen
                       313
0136 6406              314                     XRL A, #00000110b       ; fülle
0138 04                315                     INC A                   ; Zählerstand
0139 60C3              316                     JZ INC_COUNTER_1
                       317
013B C5F0              318                     XCH A,B
013D 6457              319                     XRL A, #01010111b       ; fülle                         HOFFENTLICH STIMMT DIE BITMAP
013F 04                320                     INC A                   ; Zählerstand
0140 60BE              321                     JZ INC_COUNTER_2
                       322
                       323             ; rechte reihe
0142 EF                324                     MOV A, R7
0143 5403              325                     ANL A, #00000011b       ; nur linke Reihe
0145 23                326                     RL A                    ; rotiere Alu 2x
0146 23                327                     RL A
0147 4E                328                     ORL A, R6
0148 5403              329                     ANL A, #00000011b       ; nur linke Reihe
014A 23                330                     RL A
014B 23                331                     RL A
014C 4D                332                     ORL A, R5
014D 5403              333                     ANL A, #00000011b       ; nur linke Reihe
014F F5F0              334                     MOV B, A                ; speichere Wert zwischen
0151 6460              335                     XRL A, #1100000b        ; fülle
0153 04                336                     INC A                   ; Zählerstand
0154 60A8              337                     JZ INC_COUNTER_1
0156 C5F0              338                     XCH A,B
0158 64EA              339                     XRL A, #11101010b       ; fülle                         HOFFENTLICH STIMMT DIE BITMAP
015A 04                340                     INC A                   ; Zählerstand
015B 60A3              341                     JZ INC_COUNTER_2
015D 8000              342                     LJMP CHECK_DIAGONAL
                       343
                       344             CHECK_DIAGONAL:
                       345             ;Diagonale "/"
                       346             ;a: R7 & #01000000, R6 & #00001000, R5 & #00000001
                       347             ;b: |-Verknüpfung mit #10110110
                       348             ;c: add 1, prüfe ob carry gesetzt wird, wenn dann add zählerstand
                       349             ;MOV A, #11011011b      ; testen
                       350
                       351             ;MOV A, R7
                       352             ;ORL A, R6
                       353             ;ORL A, R5
                       354             ;ORL A, #00100100b      ; fülle Platzhalter
                       355
                       356             ;INC A
                       357             ;JZ INC_COUNTER_1
                       358
                       359
                       360             ;halbe Felder
                       361             ;MOV A, #01001001b      ; testen
                       362             ;ORL A, R7
                       363             ;ORL A, R6
                       364             ;ORL A, R5
                       365             ;ORL A, #10110110b      ; fülle Platzhalter
                       366
                       367             ;INC A
                       368             ;JZ INC_COUNTER_2
                       369
                       370
0160 22                371             RET
                       372
                       373
                       374     DISPLAY_BOARD:
                       375             ;-----------------------------------------------------------------------
                       376                 ; Zeige R7,R6,R5 nacheinander gemultiplext an
                       377                 ; R7, R6, R5 spiegeln das Feld wider, x die Eingabe aus R0 von Funktion ON_INPUT (Wird au
                       378             ;-----------------------------------------------------------------------
0161 759000            379             MOV P1, #00000000b ;setze p1 standardgemäß auf 0
                       380             ;display0:
0164 8FA0              381                     MOV P2, R7
0166 D290              382                     setb P1.0
0168 109000            383                     JBC P1.0,display1
                       384             display1:
                       385                     ;MOV P2, R7
016B D291              386                     setb P1.1
016D 109100            387                     JBC P1.1,display2
                       388             display2:
                       389                     ;MOV P2, #00000000b
0170 D292              390                     setb P1.2
0172 109200            391                     JBC P1.2,display3
0175 8EA0              392             display3: MOV P2, R6
0177 D293              393                     setb P1.3
0179 109300            394                     JBC P1.3,display4
                       395             display4:
017C D294              396                     setb P1.4
017E 109400            397                     JBC P1.4,display5
                       398             display5:
                       399                     ;MOV P2, #00000000b
0181 D295              400                     setb P1.5
0183 109500            401                     JBC P1.5,display6
                       402             display6:
0186 8DA0              403                     MOV P2, R5
0188 D296              404                     setb P1.6
018A 109600            405                     JBC P1.6,display7
                       406             display7:
018D D297              407                     setb P1.7
                       408
018F 22                409                     RET
                       410                     ;LJMP main_loop
                       411
                       412
                       413
                       414
                       415     END
ASSEMBLY COMPLETE, NO ERRORS FOUND, NO WARNINGS


SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECK_DIAGONAL . . . . . . . . . . .  C  ADDR  0157H
CHECK_FOR_WIN. . . . . . . . . . . .  C  ADDR  00CEH
CHECK_HORIZONTAL . . . . . . . . . .  C  ADDR  00D0H
CHECK_VERTICAL . . . . . . . . . . .  C  ADDR  0104H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLEAR_FIELD. . . . . . . . . . . . .  C  ADDR  00BDH
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H
DISPLAY1 . . . . . . . . . . . . . .  C  ADDR  0162H
DISPLAY2 . . . . . . . . . . . . . .  C  ADDR  0167H
DISPLAY3 . . . . . . . . . . . . . .  C  ADDR  016CH
DISPLAY4 . . . . . . . . . . . . . .  C  ADDR  0173H
DISPLAY5 . . . . . . . . . . . . . .  C  ADDR  0178H
DISPLAY6 . . . . . . . . . . . . . .  C  ADDR  017DH
DISPLAY7 . . . . . . . . . . . . . .  C  ADDR  0184H
DISPLAY_BOARD. . . . . . . . . . . .  C  ADDR  0158H
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INC_COUNTER_1. . . . . . . . . . . .  C  ADDR  00F6H
INC_COUNTER_2. . . . . . . . . . . .  C  ADDR  00F8H
INIT_BOARD . . . . . . . . . . . . .  C  ADDR  0015H
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH
JOANHBINZUUNKREATIV1 . . . . . . . .  C  ADDR  0057H
JOANHBINZUUNKREATIV2 . . . . . . . .  C  ADDR  0076H
JOANHBINZUUNKREATIV3 . . . . . . . .  C  ADDR  0095H
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
LESS_THAN_3. . . . . . . . . . . . .  C  ADDR  0048H
LESS_THAN_6. . . . . . . . . . . . .  C  ADDR  0067H
LESS_THAN_9. . . . . . . . . . . . .  C  ADDR  0086H
MAIN_LOOP. . . . . . . . . . . . . .  C  ADDR  002DH
NACH_REGISTER_FÜLLEN1. . . . . . . .  C  ADDR  004FH
NACH_REGISTER_FÜLLEN2. . . . . . . .  C  ADDR  006EH
NACH_REGISTER_FÜLLEN3. . . . . . . .  C  ADDR  008DH
ON_INPUT . . . . . . . . . . . . . .  C  ADDR  0031H
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
SUM_LOOP_3 . . . . . . . . . . . . .  C  ADDR  005DH
SUM_LOOP_6 . . . . . . . . . . . . .  C  ADDR  007CH
SUM_LOOP_9 . . . . . . . . . . . . .  C  ADDR  009BH
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H  NOT USED
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED
WRITE_PLAYER_1_INTO_FIELD. . . . . .  C  ADDR  00A5H
WRITE_PLAYER_1_INTO_FIELD2 . . . . .  C  ADDR  00ADH
WRITE_PLAYER_1_INTO_FIELD3 . . . . .  C  ADDR  00B5H
WRITE_PLAYER_2_INTO_FIELD. . . . . .  C  ADDR  00A9H
WRITE_PLAYER_2_INTO_FIELD2 . . . . .  C  ADDR  00B1H
WRITE_PLAYER_2_INTO_FIELD3 . . . . .  C  ADDR  00B9H