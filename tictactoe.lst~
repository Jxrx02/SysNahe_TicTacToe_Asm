tictactoe                                                                                                               PAGE 1
                         1     ;-------------------------------------------------
                         2     ;TicTacToe, 2 Spieler
                         3     ; Eingabe: Matrix-Keypad an P0 (P0.0-P0.3, für 9 Felder), Eingabe bestätigen P3.2; P3.2 muss direkt w
                         4     ; Ausgabe: 8x8-LED-Matrix an P1, P2
                         5     ;
                         6     ; -------------------------------------------------
                         7     ORG 0000H   ; Startadresse des Programms
0000 020016              8     LJMP INIT_BOARD
                         9
                        10     ;-----------------------------------------------------------------------
                        11     ;ISR
                        12     ;-----------------------------------------------------------------------
                        13     ORG 0003H ; Einsprungsadresse von interrupt 3.2
0003 020037             14     LJMP ON_INPUT
                        15
                        16     ORG 0013H ; Einsprungsadresse von interrupt 3.3
0013 0200B7             17     LJMP CLEAR_FIELD
                        18
                        19     ;-----------------------------------------------------------------------
                        20     ; Logik
                        21     ;-----------------------------------------------------------------------
                        22     INIT_BOARD:
                        23             ;Bits für Interrupt
                        24             ;SETB IT0       ; Externer Interrupt reagiert auf fallende Flanke an P3.2; -> ist für richtig
0016 C288               25             CLR IT0         ; Externer Interrupt reagiert auf gedrückten Schalter P3.2
0018 D2A8               26             SETB EX0        ; Externen Interrupt aktivieren
001A C28A               27             CLR IT1         ; Externer Interrupt reagiert auf gedrückten Schalter P3.3
001C D2AA               28             SETB EX1        ; Externen Interrupt aktivieren
001E D2AF               29             SETB EA         ; Interrupts generell zulassen
                        30              ; --- ab hier reagiert der µC auf den externen Interrupt 0 und springt auf Adresse 03H (ISR)
0020 7F00               31             mov r7, #00000000b      ;00 | 00 | 01
                        32                                     ;00 | 00 | 01           wenn x < 3 -> R7
                        33                                     ;-- - -- - --
0022 7E00               34             mov r6, #00000000b      ;11 | 01 | 00
                        35                                     ;11 | 01 | 00           wenn x < 6 -> R6
                        36                                     ;-- | -- | --
0024 7D00               37             mov r5, #00000000b      ;11 | 00 | 00
                        38                                     ;11 | 00 | 00           sonst R5
                        39
0026 759000             40             MOV P1, #00H    ; Reset Register Port 1 als Ausgangsport für LED-Matrix; Befehl nicht notwend
0029 75A000             41             MOV P2, #00H    ; Reset Register Port 2 als Ausgangsport für LED-Matrix; Befehl nicht notwend
                        42
002C 02002F             43             LJMP MAIN_LOOP
                        44
                        45
                        46     MAIN_LOOP:
                        47             ;-----------------------------------------------------------------------
                        48                 ; ON_INPUT: Wird P3.2 betätigt, so wird Port P0 (P0.0-P0.3) eingelesen -> liefert Dezimal
                        49             ;-----------------------------------------------------------------------
002F 1200FC             50             LCALL DISPLAY_BOARD
0032 1200BE             51             LCALL CHECK_FOR_WIN
0035 80F8               52             JMP MAIN_LOOP
                        53
                        54
                        55     ON_INPUT:
0037 E580               56             MOV a, P0
0039 540F               57             ANL a, #00FH ; bitweise &-Verknüpfung, um nur die letzten 4 Bits (P0.0-P0.3) auszuwerten
003B F8                 58             MOV R0, a
                        59             ;-----------------------------------------------------------------------
                        60                 ; Mappe Feld auf 8x8 Matrix
                        61                 ; => R0 enthält den Wert des zu setztenden Feldes
                        62             ;-----------------------------------------------------------------------
                        63             ; x < 3
003C 9403               64             SUBB A, #03h; Idee: Angenommen: Eingabe 8  soll auf Feld 8 (mitte unten) gemappt werden -> sc
                        65                             ;bestimme die Mitte durch Bitshifts
                        66                             ;
                        67                             ; 8-3 >0; 5-3>0; 2-3 = -1 (^=n) Setze Carry oder wenn akku leer, springe auf
003E 400E               68             JC LESS_THAN_3 ; x<3 -> schreibe in R7
0040 600C               69             JZ LESS_THAN_3
                        70
                        71             ; 3 < x < 6
0042 9403               72             SUBB A, #03h
0044 4023               73             JC LESS_THAN_6 ; x<6 -> schreibe in R6
0046 6021               74             JZ LESS_THAN_6
                        75
                        76             ; 6< x < 9
0048 9403               77             SUBB A, #03h
004A 4038               78             JC LESS_THAN_9 ; x<9 -> schreibe in R5
004C 6036               79             JZ LESS_THAN_9
                        80
                        81             ; x < 3
                        82             LESS_THAN_3:
004E FA                 83                     MOV R2, A; register für zähler der foor loop
                        84                     ; wenn Bit P3.7 gesetzt ist, so schreibe #00000001b (Spieler 2), ansonsten #00000011b
004F 20B751             85                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD
0052 30B74A             86                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD
                        87                     NACH_REGISTER_FÜLLEN1:
0055 B2B7               88                     CPL P3.7
0057 CA                 89                     xch A,R2                ; dopppelte Vertauschung notwendig!!
0058 10D704             90                     JBC CY,SUM_LOOP_3
                        91
                        92                     JoaNhBinZuUnkreativ1:
005B CA                 93                             xch A,R2                ;tausche A mit R2
005C 6F                 94                             XRL A, R7               ;schreibe wert in TicTacToeFeld mit exclusiv-oder-Ver
005D FF                 95                             MOV R7, A               ;speichere Wert in Register zwischen
                        96
005E 32                 97                             RETI                    ;return from interupt; remove interrupt-bit
                        98
                        99             SUM_LOOP_3:
005F CA                100                     xch A,R2
0060 0A                101                     INC R2                  ; Inkrementiere den Zählerwert für die nächste Iteration
0061 23                102                     RL A            ;rotiere akku um 3 Stellen je übertrag
0062 23                103                     RL A
0063 23                104                     RL A
0064 CA                105                     xch A,R2                ;tausche A(kku) mit R2
0065 70F8              106                     JNZ SUM_LOOP_3          ; springe zurück zur Schleife, wenn r2 != 0
0067 60F2              107                     JZ JoaNhBinZuUnkreativ1
                       108
                       109             ;-----------------------------------------------------------------------
                       110             ; 3 < x < 6
                       111             LESS_THAN_6:
0069 FA                112                     MOV R2, A
006A 20B73E            113                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD2
006D 30B737            114                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD2
                       115                     NACH_REGISTER_FÜLLEN2:
0070 B2B7              116                     CPL P3.7
0072 CA                117                     xch A,R2
0073 10D704            118                     JBC CY,SUM_LOOP_6
                       119
                       120                     JoaNhBinZuUnkreativ2:
0076 CA                121                             xch A,R2
0077 6E                122                             XRL A, R6
0078 FE                123                             MOV R6, A
                       124
0079 32                125                             RETI
                       126
                       127             SUM_LOOP_6:
007A CA                128                     xch A,R2
007B 0A                129                     INC R2
007C 23                130                     RL A
007D 23                131                     RL A
007E 23                132                     RL A
007F CA                133                     xch A,R2
0080 70F8              134                     JNZ SUM_LOOP_6
0082 60F2              135                     JZ JoaNhBinZuUnkreativ2
                       136
                       137
                       138
                       139             ;-----------------------------------------------------------------------
                       140             ; 6< x < 9
                       141             LESS_THAN_9:
0084 FA                142                     MOV R2, A
0085 20B72B            143                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD3
0088 30B724            144                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD3
                       145                     NACH_REGISTER_FÜLLEN3:
008B B2B7              146                     CPL P3.7
008D CA                147                     xch A,R2
008E 10D704            148                     JBC CY,SUM_LOOP_9
                       149
                       150                     JoaNhBinZuUnkreativ3:
0091 CA                151                             xch A,R2
0092 6D                152                             XRL A, R5
0093 FD                153                             MOV R5, A
                       154
0094 32                155                             RETI
                       156
                       157             SUM_LOOP_9:
0095 CA                158                     xch A,R2
0096 0A                159                     INC R2
0097 23                160                     RL A
0098 23                161                     RL A
0099 23                162                     RL A
009A CA                163                     xch A,R2
009B 70F8              164                     JNZ SUM_LOOP_9
009D 60F2              165                     JZ JoaNhBinZuUnkreativ3
                       166
                       167     ; Das hier ist bisschen unschön, aber es muss zu der jeweiligen Adresse im 'IF' zurückgesprungen werd
                       168     WRITE_PLAYER_1_INTO_FIELD:
009F 7403              169             MOV A, #00000011b
00A1 80B2              170             JMP NACH_REGISTER_FÜLLEN1
                       171     WRITE_PLAYER_2_INTO_FIELD:
00A3 7401              172             MOV A, #00000001b
00A5 80AE              173             JMP NACH_REGISTER_FÜLLEN1
                       174
                       175     WRITE_PLAYER_1_INTO_FIELD2:
00A7 7403              176             MOV A, #00000011b
00A9 80C5              177             JMP NACH_REGISTER_FÜLLEN2
                       178     WRITE_PLAYER_2_INTO_FIELD2:
00AB 7401              179             MOV A, #00000001b
00AD 80C1              180             JMP NACH_REGISTER_FÜLLEN2
                       181
                       182     WRITE_PLAYER_1_INTO_FIELD3:
00AF 7403              183             MOV A, #00000011b
00B1 80D8              184             JMP NACH_REGISTER_FÜLLEN3
                       185     WRITE_PLAYER_2_INTO_FIELD3:
00B3 7401              186             MOV A, #00000001b
00B5 80D4              187             JMP NACH_REGISTER_FÜLLEN3
                       188
                       189
                       190     CLEAR_FIELD:
00B7 7F00              191             MOV R7, #00H
00B9 7E00              192             MOV R6, #00H
00BB 7D00              193             MOV R5, #00H
00BD 32                194             RETI
                       195
                       196     CHECK_FOR_WIN:
00BE 0200C5            197             LJMP CHECK_HORIZONTAL
                       198
                       199
                       200
                       201     CHECK_VERTICAL:
                       202     ;Senkrechte
                       203     ;a: für Register R7, R6, R5 jeweils &-Verknüpfung #01X00000b;
                       204     ;b: schreibe Register nacheinander (R7 nach R5) in alu; xor mit #01X01X01 -> wenn ALU #00000000, dann
                       205     ;c - das gleiche noch mit den anderen reihen dann #00X01X00, dann #00X00X01 &
                       206
00C1 0200C4            207             LJMP CHECK_DIAGONAL
                       208
                       209
                       210
                       211     CHECK_DIAGONAL:
                       212     ;Diagonale "/"
                       213     ;a: R7 & #01000000, R6 & #00001000, R5 & #00000001
                       214     ;b: |-Verknüpfung mit #10110110
                       215     ;c: add 1, prüfe ob carry gesetzt wird, wenn dann add zählerstand
                       216
                       217     ;Diagonale ""
                       218     ;selbe, nur Register tauschen
                       219
00C4 22                220             RET
                       221
                       222
                       223     CHECK_HORIZONTAL:
                       224             ;Waagerechte
                       225     ;a: Für Spieler 2 (Ganzes Feld) für jedes Register (5-7), |-Verknüpfung mit 00100100, addiere 1 und p
                       226     ;b: Für Spieler 1 vorher noch #10101010b mit or-verknüpfung, dann a: mit anderen zählerstand (auswert
                       227             ;Spieler mit ganzen Feldern
00C5 EF                228             MOV A, R7
00C6 4424              229             ORL A, #00100100b
00C8 04                230             INC A
00C9 6021              231             JZ INC_COUNTER_1
                       232
00CB EE                233             MOV A, R6
00CC 4424              234             ORL A, #00100100b
00CE 04                235             INC A
00CF 601B              236             JZ INC_COUNTER_1
                       237
00D1 ED                238             MOV A, R5
00D2 4424              239             ORL A, #00100100b
00D4 04                240             INC A
00D5 6015              241             JZ INC_COUNTER_1
                       242
                       243             ;Spieler mit halben Feldern
00D7 EF                244             MOV A, R7
00D8 44B6              245             ORL A, #10110110b
00DA 04                246             INC A
00DB 6012              247             JZ INC_COUNTER_2
                       248
00DD EE                249             MOV A, R6
00DE 44B6              250             ORL A, #10110110b
00E0 04                251             INC A
00E1 600C              252             JZ INC_COUNTER_2
                       253
00E3 ED                254             MOV A, R5
00E4 44B6              255             ORL A, #10110110b
00E6 04                256             INC A
00E7 6006              257             JZ INC_COUNTER_2
                       258
00E9 0200C1            259             LJMP CHECK_VERTICAL
                       260
                       261
                       262
                       263     INC_COUNTER_1:          ; R4 beinhaltet Punktestand von S1 und S2: 0000 | 0000
00EC 0C                264             INC R4
00ED 012F              265             JMP MAIN_LOOP
                       266     INC_COUNTER_2:
00EF CC                267             XCH A, R4
00F0 23                268             RL A
00F1 23                269             RL A
00F2 23                270             RL A
00F3 23                271             RL A
00F4 04                272             INC A
00F5 23                273             RL A
00F6 23                274             RL A
00F7 23                275             RL A
00F8 23                276             RL A
00F9 CC                277             XCH A, R4
                       278
00FA 012F              279             JMP MAIN_LOOP
                       280
                       281
                       282     DISPLAY_BOARD:
                       283             ;-----------------------------------------------------------------------
                       284                 ; Zeige R7,R6,R5 nacheinander gemultiplext an
                       285                 ; R7, R6, R5 spiegeln das Feld wider, x die Eingabe aus R0 von Funktion ON_INPUT (Wird au
                       286             ;-----------------------------------------------------------------------
                       287
                       288
                       289
00FC 759000            290             MOV P1, #00000000b ;setze p1 standardgemäß auf 0
                       291             ;display0:
00FF 8FA0              292                     MOV P2, R7
0101 D290              293                     setb P1.0
0103 109000            294                     JBC P1.0,display1
                       295             display1:
                       296                     ;MOV P2, R7
0106 D291              297                     setb P1.1
0108 109100            298                     JBC P1.1,display2
                       299             display2:
                       300                     ;MOV P2, #00000000b
010B D292              301                     setb P1.2
010D 109200            302                     JBC P1.2,display3
0110 8EA0              303             display3: MOV P2, R6
0112 D293              304                     setb P1.3
0114 109300            305                     JBC P1.3,display4
                       306             display4:
0117 D294              307                     setb P1.4
0119 109400            308                     JBC P1.4,display5
                       309             display5:
                       310                     ;MOV P2, #00000000b
011C D295              311                     setb P1.5
011E 109500            312                     JBC P1.5,display6
                       313             display6:
0121 8DA0              314                     MOV P2, R5
0123 D296              315                     setb P1.6
0125 109600            316                     JBC P1.6,display7
                       317             display7:
0128 D297              318                     setb P1.7
                       319
012A 22                320                     RET
                       321                     ;LJMP main_loop
                       322
                       323
                       324
                       325
                       326     END
ASSEMBLY COMPLETE, NO ERRORS FOUND, NO WARNINGS


SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H  NOT USED
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECK_DIAGONAL . . . . . . . . . . .  C  ADDR  00C4H
CHECK_FOR_WIN. . . . . . . . . . . .  C  ADDR  00BEH
CHECK_HORIZONTAL . . . . . . . . . .  C  ADDR  00C5H
CHECK_VERTICAL . . . . . . . . . . .  C  ADDR  00C1H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLEAR_FIELD. . . . . . . . . . . . .  C  ADDR  00B7H
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H
DISPLAY1 . . . . . . . . . . . . . .  C  ADDR  0106H
DISPLAY2 . . . . . . . . . . . . . .  C  ADDR  010BH
DISPLAY3 . . . . . . . . . . . . . .  C  ADDR  0110H
DISPLAY4 . . . . . . . . . . . . . .  C  ADDR  0117H
DISPLAY5 . . . . . . . . . . . . . .  C  ADDR  011CH
DISPLAY6 . . . . . . . . . . . . . .  C  ADDR  0121H
DISPLAY7 . . . . . . . . . . . . . .  C  ADDR  0128H
DISPLAY_BOARD. . . . . . . . . . . .  C  ADDR  00FCH
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INC_COUNTER_1. . . . . . . . . . . .  C  ADDR  00ECH
INC_COUNTER_2. . . . . . . . . . . .  C  ADDR  00EFH
INIT_BOARD . . . . . . . . . . . . .  C  ADDR  0016H
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH
JOANHBINZUUNKREATIV1 . . . . . . . .  C  ADDR  005BH
JOANHBINZUUNKREATIV2 . . . . . . . .  C  ADDR  0076H
JOANHBINZUUNKREATIV3 . . . . . . . .  C  ADDR  0091H
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
LESS_THAN_3. . . . . . . . . . . . .  C  ADDR  004EH
LESS_THAN_6. . . . . . . . . . . . .  C  ADDR  0069H
LESS_THAN_9. . . . . . . . . . . . .  C  ADDR  0084H
MAIN_LOOP. . . . . . . . . . . . . .  C  ADDR  002FH
NACH_REGISTER_FÜLLEN1. . . . . . . .  C  ADDR  0055H
NACH_REGISTER_FÜLLEN2. . . . . . . .  C  ADDR  0070H
NACH_REGISTER_FÜLLEN3. . . . . . . .  C  ADDR  008BH
ON_INPUT . . . . . . . . . . . . . .  C  ADDR  0037H
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
SUM_LOOP_3 . . . . . . . . . . . . .  C  ADDR  005FH
SUM_LOOP_6 . . . . . . . . . . . . .  C  ADDR  007AH
SUM_LOOP_9 . . . . . . . . . . . . .  C  ADDR  0095H
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H  NOT USED
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED
WRITE_PLAYER_1_INTO_FIELD. . . . . .  C  ADDR  009FH
WRITE_PLAYER_1_INTO_FIELD2 . . . . .  C  ADDR  00A7H
WRITE_PLAYER_1_INTO_FIELD3 . . . . .  C  ADDR  00AFH
WRITE_PLAYER_2_INTO_FIELD. . . . . .  C  ADDR  00A3H
WRITE_PLAYER_2_INTO_FIELD2 . . . . .  C  ADDR  00ABH
WRITE_PLAYER_2_INTO_FIELD3 . . . . .  C  ADDR  00B3H