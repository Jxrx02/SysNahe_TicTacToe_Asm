tictactoe                                                                                                               PAGE 1
                         1     ;-------------------------------------------------
                         2     ;TicTacToe, 2 Spieler
                         3     ; Eingabe: Matrix-Keypad an P0 (P0.0-P0.3, für 9 Felder), Eingabe bestätigen P3.2; P3.2 muss direkt w
                         4     ; Ausgabe: 8x8-LED-Matrix an P1, P2
                         5     ;
                         6     ; -------------------------------------------------
                         7     ORG 0000H   ; Startadresse des Programms
0000 020016              8     LJMP INIT_BOARD
                         9
                        10     ;-----------------------------------------------------------------------
                        11     ;ISR
                        12     ;-----------------------------------------------------------------------
                        13     ORG 0003H ; Einsprungsadresse von Interrupt 3.2
0003 020034             14     LJMP ON_INPUT
                        15
                        16     ORG 0013H ; Einsprungsadresse von Interrupt 3.3
0013 0200BD             17     LJMP CLEAR_FIELD
                        18
                        19     ;-----------------------------------------------------------------------
                        20     ; Logik
                        21     ;-----------------------------------------------------------------------
                        22     INIT_BOARD:
                        23             ;Bits für Interrupt
                        24             ;SETB IT0       ; Externer Interrupt reagiert auf fallende Flanke an P3.2; -> ist für richtig
0016 C288               25             CLR IT0         ; Externer Interrupt reagiert auf gedrückten Schalter P3.2
0018 D2A8               26             SETB EX0        ; Externen Interrupt aktivieren
001A C28A               27             CLR IT1         ; Externer Interrupt reagiert auf gedrückten Schalter P3.3
001C D2AA               28             SETB EX1        ; Externen Interrupt aktivieren
001E D2AF               29             SETB EA         ; Interrupts generell zulassen
                        30              ; --- ab hier reagiert der µC auf den externen Interrupt 0 und springt auf Adresse 03H (ISR)
0020 7F00               31             mov r7, #00000000b      ;00 | 00 | 01
                        32                                     ;00 | 00 | 01           wenn x < 3 -> R7
                        33                                     ;-- - -- - --
0022 7E00               34             mov r6, #00000000b      ;11 | 01 | 00
                        35                                     ;11 | 01 | 00           wenn x < 6 -> R6
                        36                                     ;-- | -- | --
0024 7D00               37             mov r5, #00000000b      ;11 | 00 | 00
                        38                                     ;11 | 00 | 00           sonst R5
                        39
0026 759000             40             MOV P1, #00H    ; Reset Register Port 1 als Ausgangsport für LED-Matrix; Befehl nicht notwend
0029 75A000             41             MOV P2, #00H    ; Reset Register Port 2 als Ausgangsport für LED-Matrix; Befehl nicht notwend
                        42
002C 02002F             43             LJMP MAIN_LOOP
                        44
                        45
                        46     MAIN_LOOP:
                        47             ;-----------------------------------------------------------------------
                        48                 ; ON_INPUT: Wird P3.2 betätigt, so wird Port P0 (P0.0-P0.3) eingelesen -> liefert Dezimal
                        49             ;-----------------------------------------------------------------------
002F 12011B             50             LCALL DISPLAY_BOARD
0032 80FB               51             JMP MAIN_LOOP
                        52
                        53
                        54     ON_INPUT:
0034 E580               55             MOV a, P0
0036 540F               56             ANL a, #00FH ; bitweise &-Verknüpfung, um nur die letzten 4 Bits (P0.0-P0.3) auszuwerten
0038 F8                 57             MOV R0, a
                        58             ;-----------------------------------------------------------------------
                        59                 ; Mappe Feld auf 8x8 Matrix
                        60                 ; => R0 enthält den Wert des zu setztenden Feldes
                        61             ;-----------------------------------------------------------------------
                        62             ; x < 3
0039 9403               63             SUBB A, #03h; Idee: Angenommen: Eingabe 8  soll auf Feld 8 (mitte unten) gemappt werden -> sc
                        64                             ;bestimme die Mitte durch Bitshifts
                        65                             ;
                        66                             ; 8-3 >0; 5-3>0; 2-3 = -1 (^=n) Setze Carry oder wenn akku leer, springe auf
003B 400E               67             JC LESS_THAN_3 ; x<3 -> schreibe in R7
003D 600C               68             JZ LESS_THAN_3
                        69
                        70             ; 3 < x < 6
003F 9403               71             SUBB A, #03h
0041 4026               72             JC LESS_THAN_6 ; x<6 -> schreibe in R6
0043 6024               73             JZ LESS_THAN_6
                        74
                        75             ; 6< x < 9
0045 9403               76             SUBB A, #03h
0047 403E               77             JC LESS_THAN_9 ; x<9 -> schreibe in R5
0049 603C               78             JZ LESS_THAN_9
                        79
                        80             ; x < 3
                        81             LESS_THAN_3:
004B FA                 82                     MOV R2, A; register für zähler der foor loop
                        83                     ; wenn Bit P3.7 gesetzt ist, so schreibe #00000001b (Spieler 2), ansonsten #00000011b
004C 20B75A             84                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD
004F 30B753             85                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD
                        86                     NACH_REGISTER_FÜLLEN1:
0052 B2B7               87                             CPL P3.7
0054 CA                 88                             xch A,R2                ; dopppelte Vertauschung notwendig!!
0055 10D707             89                             JBC CY,SUM_LOOP_3
                        90
                        91                     JoaNhBinZuUnkreativ1:
0058 CA                 92                             xch A,R2                ;tausche A mit R2
0059 6F                 93                             XRL A, R7               ;schreibe wert in TicTacToeFeld mit exclusiv-oder-Ver
005A FF                 94                             MOV R7, A               ;speichere Wert in Register zwischen
005B 1200C4             95                             LCALL CHECK_FOR_WIN
005E 32                 96                             RETI                    ;return from interupt; remove interrupt-bit
                        97
                        98             SUM_LOOP_3:
005F CA                 99                     xch A,R2
0060 0A                100                     INC R2                          ;Inkrementiere den Zählerwert für die nächste Iterati
0061 23                101                     RL A                            ;rotiere akku um 3 Stellen je übertrag
0062 23                102                     RL A
0063 23                103                     RL A
0064 CA                104                     xch A,R2                        ;tausche A(kku) mit R2
0065 70F8              105                     JNZ SUM_LOOP_3                  ;springe zurück zur Schleife, wenn r2 != 0
0067 60EF              106                     JZ JoaNhBinZuUnkreativ1         ;sonst speichere Wert in R7
                       107
                       108             ;-----------------------------------------------------------------------
                       109             ; 3 < x < 6
                       110             LESS_THAN_6:
0069 FA                111                     MOV R2, A
006A 20B744            112                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD2
006D 30B73D            113                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD2
                       114                     NACH_REGISTER_FÜLLEN2:
0070 B2B7              115                             CPL P3.7
0072 CA                116                             xch A,R2
0073 10D707            117                             JBC CY,SUM_LOOP_6
                       118
                       119                     JoaNhBinZuUnkreativ2:
0076 CA                120                             xch A,R2
0077 6E                121                             XRL A, R6
0078 FE                122                             MOV R6, A
0079 1200C4            123                             LCALL CHECK_FOR_WIN
007C 32                124                             RETI
                       125
                       126             SUM_LOOP_6:
007D CA                127                     xch A,R2
007E 0A                128                     INC R2
007F 23                129                     RL A
0080 23                130                     RL A
0081 23                131                     RL A
0082 CA                132                     xch A,R2
0083 70F8              133                     JNZ SUM_LOOP_6
0085 60EF              134                     JZ JoaNhBinZuUnkreativ2
                       135
                       136
                       137
                       138             ;-----------------------------------------------------------------------
                       139             ; 6< x < 9
                       140             LESS_THAN_9:
0087 FA                141                     MOV R2, A
0088 20B72E            142                     JB P3.7, WRITE_PLAYER_2_INTO_FIELD3
008B 30B727            143                     JNB P3.7, WRITE_PLAYER_1_INTO_FIELD3
                       144                     NACH_REGISTER_FÜLLEN3:
008E B2B7              145                             CPL P3.7
0090 CA                146                             xch A,R2
0091 10D707            147                             JBC CY,SUM_LOOP_9
                       148
                       149                     JoaNhBinZuUnkreativ3:
0094 CA                150                             xch A,R2
0095 6D                151                             XRL A, R5
0096 FD                152                             MOV R5, A
0097 1200C4            153                             LCALL CHECK_FOR_WIN
009A 32                154                             RETI
                       155
                       156             SUM_LOOP_9:
009B CA                157                     xch A,R2
009C 0A                158                     INC R2
009D 23                159                     RL A
009E 23                160                     RL A
009F 23                161                     RL A
00A0 CA                162                     xch A,R2
00A1 70F8              163                     JNZ SUM_LOOP_9
00A3 60EF              164                     JZ JoaNhBinZuUnkreativ3
                       165
                       166     ; Das hier ist bisschen unschön, aber es muss zu der jeweiligen Adresse im 'IF' zurückgesprungen werd
                       167     WRITE_PLAYER_1_INTO_FIELD:
00A5 7403              168             MOV A, #00000011b
00A7 80A9              169             JMP NACH_REGISTER_FÜLLEN1
                       170     WRITE_PLAYER_2_INTO_FIELD:
00A9 7401              171             MOV A, #00000001b
00AB 80A5              172             JMP NACH_REGISTER_FÜLLEN1
                       173
                       174     WRITE_PLAYER_1_INTO_FIELD2:
00AD 7403              175             MOV A, #00000011b
00AF 80BF              176             JMP NACH_REGISTER_FÜLLEN2
                       177     WRITE_PLAYER_2_INTO_FIELD2:
00B1 7401              178             MOV A, #00000001b
00B3 80BB              179             JMP NACH_REGISTER_FÜLLEN2
                       180
                       181     WRITE_PLAYER_1_INTO_FIELD3:
00B5 7403              182             MOV A, #00000011b
00B7 80D5              183             JMP NACH_REGISTER_FÜLLEN3
                       184     WRITE_PLAYER_2_INTO_FIELD3:
00B9 7401              185             MOV A, #00000001b
00BB 80D1              186             JMP NACH_REGISTER_FÜLLEN3
                       187
                       188
                       189     CLEAR_FIELD:
00BD 7F00              190             MOV R7, #00H
00BF 7E00              191             MOV R6, #00H
00C1 7D00              192             MOV R5, #00H
00C3 32                193             RETI
                       194
                       195     CHECK_FOR_WIN:
00C4 0200C7            196             LJMP CHECK_HORIZONTAL
                       197
                       198             CHECK_HORIZONTAL:
                       199             ;Waagerechte
                       200             ;a: Für Spieler 2 (Ganzes Feld) für jedes Register (5-7), |-Verknüpfung mit 00100100, addiere
                       201             ;b: Für Spieler 1 vorher noch #10101010b mit or-verknüpfung, dann a: mit anderen zählerstand
                       202                     ;Spieler mit ganzen Feldern
                       203                     ;MOV R7, #01001001b     ;zum Testen
00C7 EF                204                     MOV A, R7
00C8 4424              205                     ORL A, #00100100b
00CA 04                206                     INC A
00CB 603E              207                     JZ INC_COUNTER_1
                       208
00CD EE                209                     MOV A, R6
00CE 4424              210                     ORL A, #00100100b
00D0 04                211                     INC A
00D1 6038              212                     JZ INC_COUNTER_1
                       213
00D3 ED                214                     MOV A, R5
00D4 4424              215                     ORL A, #00100100b
00D6 04                216                     INC A
00D7 6032              217                     JZ INC_COUNTER_1
                       218
                       219                     ;Spieler mit halben Feldern
00D9 EF                220                     MOV A, R7                       ; exclusiv oder, da das vollständig gefüllte Feld die
00DA 64B6              221                     XRL A, #10110110b
00DC 04                222                     INC A
00DD 602F              223                     JZ INC_COUNTER_2
                       224
00DF EE                225                     MOV A, R6
00E0 64B6              226                     XRL A, #10110110b
00E2 04                227                     INC A
00E3 6029              228                     JZ INC_COUNTER_2
                       229
00E5 ED                230                     MOV A, R5
00E6 64B6              231                     XRL A, #10110110b
00E8 04                232                     INC A
00E9 6023              233                     JZ INC_COUNTER_2
                       234
00EB 0200EE            235                     LJMP CHECK_VERTICAL
                       236
                       237             CHECK_VERTICAL:
                       238             ;Senkrechte
                       239             ;a: für Register R7, R6, R5 jeweils &-Verknüpfung #01X00000b;
                       240             ;b: schreibe Register nacheinander (R7 nach R5) in alu; xor mit #01X01X01 -> wenn ALU #000000
                       241             ;c - das gleiche noch mit den anderen reihen dann #00X01X00, dann #00X00X01 &
00EE EF                242                     MOV A, R7
                       243
                       244
                       245
00EF 0200F2            246                     LJMP CHECK_DIAGONAL
                       247
                       248
                       249
                       250             CHECK_DIAGONAL:
                       251             ;Diagonale "/"
                       252             ;a: R7 & #01000000, R6 & #00001000, R5 & #00000001
                       253             ;b: |-Verknüpfung mit #10110110
                       254             ;c: add 1, prüfe ob carry gesetzt wird, wenn dann add zählerstand
                       255
                       256             ;Diagonale ""
                       257             ;selbe, nur Bitmap tauschen
                       258             ;ganze Felder
00F2 4F                259             ORL A, R7
00F3 54C0              260             ANL A, #11000000b       ;glaube nicht notwendig, da bits mit oder verknüpft werden. habs denn
                       261
00F5 4E                262             ORL A, R6
00F6 5418              263             ANL A, #00011000b
                       264
00F8 4D                265             ORL A, R5
00F9 5403              266             ANL A, #00000011b
00FB 4424              267             ORL A, #00100100b       ; fülle Platzhalter
                       268
00FD 04                269             INC A
00FE 600B              270             JZ INC_COUNTER_1
                       271
                       272
                       273             ;halbe Felder
0100 7449              274             MOV A, #01001001b
0102 4F                275             ORL A, R7
0103 4E                276             ORL A, R6
0104 4D                277             ORL A, R5
                       278
0105 44B6              279             ORL A, #10110110b       ; fülle Platzhalter
                       280
0107 04                281             INC A
0108 6004              282             JZ INC_COUNTER_2
                       283
                       284
010A 22                285             RET
                       286
                       287
                       288
                       289
                       290     INC_COUNTER_1:          ; R4 beinhaltet Punktestand von S1 und S2: 0000 | 0000
010B 0C                291             INC R4
010C 012F              292             JMP MAIN_LOOP
                       293     INC_COUNTER_2:
010E CC                294             XCH A, R4
010F 23                295             RL A
0110 23                296             RL A
0111 23                297             RL A
0112 23                298             RL A
0113 04                299             INC A
0114 23                300             RL A
0115 23                301             RL A
0116 23                302             RL A
0117 23                303             RL A
0118 CC                304             XCH A, R4
                       305
0119 012F              306             JMP MAIN_LOOP
                       307
                       308
                       309     DISPLAY_BOARD:
                       310             ;-----------------------------------------------------------------------
                       311                 ; Zeige R7,R6,R5 nacheinander gemultiplext an
                       312                 ; R7, R6, R5 spiegeln das Feld wider, x die Eingabe aus R0 von Funktion ON_INPUT (Wird au
                       313             ;-----------------------------------------------------------------------
                       314
                       315
                       316
011B 759000            317             MOV P1, #00000000b ;setze p1 standardgemäß auf 0
                       318             ;display0:
011E 8FA0              319                     MOV P2, R7
0120 D290              320                     setb P1.0
0122 109000            321                     JBC P1.0,display1
                       322             display1:
                       323                     ;MOV P2, R7
0125 D291              324                     setb P1.1
0127 109100            325                     JBC P1.1,display2
                       326             display2:
                       327                     ;MOV P2, #00000000b
012A D292              328                     setb P1.2
012C 109200            329                     JBC P1.2,display3
012F 8EA0              330             display3: MOV P2, R6
0131 D293              331                     setb P1.3
0133 109300            332                     JBC P1.3,display4
                       333             display4:
0136 D294              334                     setb P1.4
0138 109400            335                     JBC P1.4,display5
                       336             display5:
                       337                     ;MOV P2, #00000000b
013B D295              338                     setb P1.5
013D 109500            339                     JBC P1.5,display6
                       340             display6:
0140 8DA0              341                     MOV P2, R5
0142 D296              342                     setb P1.6
0144 109600            343                     JBC P1.6,display7
                       344             display7:
0147 D297              345                     setb P1.7
                       346
0149 22                347                     RET
                       348                     ;LJMP main_loop
                       349
                       350
                       351
                       352
                       353     END
ASSEMBLY COMPLETE, NO ERRORS FOUND, NO WARNINGS


SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H  NOT USED
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECK_DIAGONAL . . . . . . . . . . .  C  ADDR  00F2H
CHECK_FOR_WIN. . . . . . . . . . . .  C  ADDR  00C4H
CHECK_HORIZONTAL . . . . . . . . . .  C  ADDR  00C7H
CHECK_VERTICAL . . . . . . . . . . .  C  ADDR  00EEH
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLEAR_FIELD. . . . . . . . . . . . .  C  ADDR  00BDH
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H
DISPLAY1 . . . . . . . . . . . . . .  C  ADDR  0125H
DISPLAY2 . . . . . . . . . . . . . .  C  ADDR  012AH
DISPLAY3 . . . . . . . . . . . . . .  C  ADDR  012FH
DISPLAY4 . . . . . . . . . . . . . .  C  ADDR  0136H
DISPLAY5 . . . . . . . . . . . . . .  C  ADDR  013BH
DISPLAY6 . . . . . . . . . . . . . .  C  ADDR  0140H
DISPLAY7 . . . . . . . . . . . . . .  C  ADDR  0147H
DISPLAY_BOARD. . . . . . . . . . . .  C  ADDR  011BH
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INC_COUNTER_1. . . . . . . . . . . .  C  ADDR  010BH
INC_COUNTER_2. . . . . . . . . . . .  C  ADDR  010EH
INIT_BOARD . . . . . . . . . . . . .  C  ADDR  0016H
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH
JOANHBINZUUNKREATIV1 . . . . . . . .  C  ADDR  0058H
JOANHBINZUUNKREATIV2 . . . . . . . .  C  ADDR  0076H
JOANHBINZUUNKREATIV3 . . . . . . . .  C  ADDR  0094H
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
LESS_THAN_3. . . . . . . . . . . . .  C  ADDR  004BH
LESS_THAN_6. . . . . . . . . . . . .  C  ADDR  0069H
LESS_THAN_9. . . . . . . . . . . . .  C  ADDR  0087H
MAIN_LOOP. . . . . . . . . . . . . .  C  ADDR  002FH
NACH_REGISTER_FÜLLEN1. . . . . . . .  C  ADDR  0052H
NACH_REGISTER_FÜLLEN2. . . . . . . .  C  ADDR  0070H
NACH_REGISTER_FÜLLEN3. . . . . . . .  C  ADDR  008EH
ON_INPUT . . . . . . . . . . . . . .  C  ADDR  0034H
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
SUM_LOOP_3 . . . . . . . . . . . . .  C  ADDR  005FH
SUM_LOOP_6 . . . . . . . . . . . . .  C  ADDR  007DH
SUM_LOOP_9 . . . . . . . . . . . . .  C  ADDR  009BH
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H  NOT USED
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED
WRITE_PLAYER_1_INTO_FIELD. . . . . .  C  ADDR  00A5H
WRITE_PLAYER_1_INTO_FIELD2 . . . . .  C  ADDR  00ADH
WRITE_PLAYER_1_INTO_FIELD3 . . . . .  C  ADDR  00B5H
WRITE_PLAYER_2_INTO_FIELD. . . . . .  C  ADDR  00A9H
WRITE_PLAYER_2_INTO_FIELD2 . . . . .  C  ADDR  00B1H
WRITE_PLAYER_2_INTO_FIELD3 . . . . .  C  ADDR  00B9H